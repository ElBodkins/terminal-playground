import { Lesson } from "@/types/types";

export const dockerLessons: Lesson[] = [
  {
    id: "1",
    title: "Docker Basics",
    description: "Learn Docker fundamentals and basic commands",
    commands: ["docker --version", "docker info", "docker --help"],
    commandExplanations: [
      "Checks the installed Docker version",
      "Displays detailed system-wide Docker information",
      "Shows all available Docker commands and options",
    ],
    expectedOutputs: [
      "Docker version information (e.g., 'Docker version 20.10.12')",
      "Detailed configuration and resource information",
      "List of available Docker commands and how to use them",
    ],
  },
  {
    id: "2",
    title: "Working with Images",
    description: "Learn to manage Docker images",
    commands: [
      "docker images",
      "docker pull nginx",
      "docker pull node:16-alpine",
      "docker images",
    ],
    commandExplanations: [
      "Lists all locally available Docker images",
      "Downloads the latest nginx image from Docker Hub",
      "Downloads the Node.js 16 Alpine image (a lightweight Linux distribution)",
      "Lists images again to show the newly downloaded ones",
    ],
    expectedOutputs: [
      "List of currently installed images (empty if first run)",
      "Download progress for nginx image",
      "Download progress for Node.js Alpine image",
      "Updated image list showing both new images",
    ],
  },
  {
    id: "3",
    title: "Running Containers",
    description: "Create and run your first containers",
    commands: [
      "docker run hello-world",
      "docker run -d --name my-nginx -p 8080:80 nginx",
      "docker ps",
    ],
    commandExplanations: [
      "Runs the hello-world container (a simple test container)",
      "Runs nginx in detached mode (-d), names it 'my-nginx', and maps port 8080 to 80",
      "Lists all currently running containers",
    ],
    expectedOutputs: [
      "Welcome message from the hello-world container",
      "Container ID of the newly created nginx container",
      "List showing your running nginx container with port mapping",
    ],
  },
  {
    id: "4",
    title: "Container Management",
    description: "Stop, start, and manage containers",
    commands: [
      "docker ps",
      "docker stop my-nginx",
      "docker ps -a",
      "docker start my-nginx",
      "docker ps",
    ],
    commandExplanations: [
      "Lists running containers (should show my-nginx)",
      "Stops the my-nginx container",
      "Lists all containers including stopped ones (-a flag)",
      "Restarts the stopped my-nginx container",
      "Lists running containers again to verify restart",
    ],
    expectedOutputs: [
      "Initial list showing my-nginx running",
      "Confirmation that my-nginx was stopped",
      "List showing my-nginx with 'Exited' status",
      "Confirmation that my-nginx was started",
      "Final list showing my-nginx running again",
    ],
  },
  {
    id: "5",
    title: "Container Logs and Inspection",
    description: "View container logs and details",
    commands: [
      "docker logs my-nginx",
      "docker inspect my-nginx",
      "docker stats",
    ],
    commandExplanations: [
      "Shows the logs/output from the nginx container",
      "Displays detailed configuration and state information about the container",
      "Shows live resource usage statistics for running containers",
    ],
    expectedOutputs: [
      "Nginx access/error logs",
      "JSON-formatted container details (IP, ports, mounts, etc.)",
      "Real-time CPU, memory, and network usage for all containers",
    ],
  },
  {
    id: "6",
    title: "Interactive Containers",
    description: "Run interactive commands in containers",
    commands: [
      "docker run -it ubuntu bash",
      "docker exec -it my-nginx bash",
      "exit",
    ],
    commandExplanations: [
      "Starts an interactive Ubuntu container with bash shell (-it flags)",
      "Executes bash inside the already running nginx container",
      "Exits the interactive shell (works in both cases)",
    ],
    expectedOutputs: [
      "Ubuntu container's bash prompt (root@container-id:/#)",
      "Nginx container's bash prompt (if available)",
      "Returns you to your host machine's terminal",
    ],
  },
  {
    id: "7",
    title: "Building Custom Images",
    description: "Create your own Docker images",
    commands: [
      "docker build -t my-app .",
      "docker images",
      "docker run my-app",
    ],
    commandExplanations: [
      "Builds an image from Dockerfile in current directory (.) and tags it as 'my-app'",
      "Lists images to verify your new image was created",
      "Runs a container from your custom image",
    ],
    expectedOutputs: [
      "Build process output showing each Dockerfile instruction",
      "Image list showing your new 'my-app' image",
      "Output from running your application (depends on your Dockerfile)",
    ],
  },
  {
    id: "8",
    title: "Data Management",
    description: "Work with volumes and data persistence",
    commands: [
      "docker volume create my_volume",
      "docker volume ls",
      "docker run -v my_volume:/data alpine",
      "docker volume inspect my_volume",
    ],
    commandExplanations: [
      "Creates a named volume for persistent storage",
      "Lists all Docker volumes",
      "Runs an Alpine container with the volume mounted at /data",
      "Shows detailed information about the volume",
    ],
    expectedOutputs: [
      "Confirmation of volume creation ('my_volume')",
      "List showing your new volume among others",
      "Container output (if any) with the volume mounted",
      "Volume details including mountpoint on host",
    ],
  },
  {
    id: "9",
    title: "Networking",
    description: "Understand Docker networking concepts",
    commands: [
      "docker network ls",
      "docker network create my-network",
      "docker run --network my-network --name web nginx",
      "docker network inspect my-network",
    ],
    commandExplanations: [
      "Lists available Docker networks",
      "Creates a new custom bridge network",
      "Runs an nginx container attached to your custom network",
      "Shows detailed configuration of your network",
    ],
    expectedOutputs: [
      "List of default networks (bridge, host, none)",
      "Confirmation of network creation",
      "Nginx container ID running on your network",
      "Network details including connected containers",
    ],
  },
  {
    id: "10",
    title: "Multi-container Applications",
    description: "Run multiple connected containers",
    commands: [
      "docker run -d --name db -e POSTGRES_PASSWORD=secret postgres",
      "docker run -d --name app --link db:database node:16-alpine",
      "docker ps",
      "docker logs app",
    ],
    commandExplanations: [
      "Runs a PostgreSQL container with environment variable for password",
      "Runs a Node.js container linked to the PostgreSQL container",
      "Lists both running containers",
      "Shows logs from the Node.js application",
    ],
    expectedOutputs: [
      "PostgreSQL container ID",
      "Node.js container ID",
      "List showing both containers running",
      "Application logs (may show database connection attempts)",
    ],
  },
  {
    id: "11",
    title: "Cleanup and Maintenance",
    description: "Clean up Docker resources",
    commands: [
      "docker stop $(docker ps -q)",
      "docker rm $(docker ps -aq)",
      "docker rmi $(docker images -q)",
      "docker system prune",
    ],
    commandExplanations: [
      "Stops all running containers ($(docker ps -q) gets all container IDs)",
      "Removes all containers (running and stopped)",
      "Removes all images",
      "Cleans up unused containers, networks, images (dangling), and build cache",
    ],
    expectedOutputs: [
      "List of stopped containers",
      "List of removed containers",
      "List of removed images",
      "Summary of reclaimed space",
    ],
  },
  {
    id: "12",
    title: "Advanced Operations",
    description: "Advanced Docker techniques",
    commands: [
      "docker commit my-nginx my-custom-nginx",
      "docker save -o nginx.tar nginx",
      "docker load -i nginx.tar",
      "docker tag nginx my-registry/nginx",
    ],
    commandExplanations: [
      "Creates a new image from a running container's changes",
      "Saves an image to a tar archive file",
      "Loads an image from a tar archive",
      "Tags an image for pushing to a custom registry",
    ],
    expectedOutputs: [
      "New image ID for my-custom-nginx",
      "No output on success (creates nginx.tar file)",
      "Loaded image details",
      "No output on success (new tag appears in docker images)",
    ],
  },
];
